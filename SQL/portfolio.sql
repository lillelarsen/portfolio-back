-- phpMyAdmin SQL Dump
-- version 4.9.0.1
-- https://www.phpmyadmin.net/
--
-- Vært: 127.0.0.1
-- Genereringstid: 11. 02 2020 kl. 22:39:26
-- Serverversion: 10.4.6-MariaDB
-- PHP-version: 7.3.9

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `portfolio`
--
CREATE DATABASE IF NOT EXISTS `portfolio` DEFAULT CHARACTER SET latin1 COLLATE latin1_swedish_ci;
USE `portfolio`;

-- --------------------------------------------------------

--
-- Struktur-dump for tabellen `articles`
--

CREATE TABLE `articles` (
  `id` int(11) NOT NULL,
  `title` varchar(100) NOT NULL,
  `content` text NOT NULL DEFAULT '',
  `created_at` timestamp NOT NULL DEFAULT current_timestamp()
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Data dump for tabellen `articles`
--

INSERT INTO `articles` (`id`, `title`, `content`, `created_at`) VALUES
(1, 'Hvilken kode editor skal jeg bruge #1', '<p>Før du kan gå igang med at kode din første hjemmeside, skal du have et program der kan hjælpe dig igennem denne udfordring. I princippet kan alle tekstprogrammer fungere som kode editor. Men det kan klart anbefales at bruge programmerne der er lavet til det, da der er mange flere hjælpe værktøjer i disse.</p>\r\n<h2>Visual Studio Code</h2>\r\n<p>En af de mest populære programmer der bliver brugt er VS Code. Det er meget simpelt og understøtter rigtig, rigtig mange forskellige kode sprog. Udover det findes der mange Extensions til programmet, så det også tit gør opgaverne nemmere. Her på kanalhvordan.dk bruger vi denne editor. Så hvis du følger vores tutorials og andet, så kan det klart anbefales at starte ud med denne. Bedst af alt er, den også er gratis.</p>\r\n<p>Den kan downloades her: <a href=\"https://code.visualstudio.com/\">https://code.visualstudio.com/</a></p>\r\n<p>Kort gennemgang af hvordan man bruger Visual Studio Code.</p>\r\n<p>På nedestående billede kan du yderst til venstre se at ikonet med filer er valgt. På dit workspace eller hvis du ikke har et workspace, skulle du gerne kunne højreklikke på hele denne explorer kolonne og tilføje en mappe med dit projekt i. Mappen du vælger skal allerede være oprettet før du kan vælge den i programmet. På eksemplet herunder, har jeg hentet mappen ind der hedder \"showroom\".</p>\r\n<p><img class=\"aligncenter wp-image-43 size-full\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/vscode_1.png\" alt=\"VS Code kode editor\" width=\"674\" height=\"500\" /></p>\r\n<p>Når du har fået åbnet dit projekt er det nemt at tilføje filer og mapper til projektet, det gør du med de små ikoner, som i eksemplet herunder hvor jeg har oprettet en fil der hedder \"index.html\", i mit projekt \"showroom\".</p>\r\n<p><img class=\"aligncenter size-large wp-image-44\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/vscode_2.png\" alt=\"\" width=\"674\" height=\"500\" /></p>\r\n<p>For at se dit projekt, som det vil se ud i live version på nettet kan du som i nedestående eksempel højreklikke på din index.html-fil og vælge at se den i din browser. Dette er mere eller mindre det du skal vide for at komme igang med at lave en simpel hjemmeside.</p>\r\n<p><img class=\"aligncenter size-large wp-image-45\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/vscode_3.png\" alt=\"\" width=\"674\" height=\"500\" /></p>\r\n<h2>Flere end en Code Editor</h2>\r\n<p>Der findes et hav af programmer at kode web-applikationer i. Der ingen rigtige og forkerte, dog er der nogle der kan mere end andre og måske slet ikke kan det du skal bruge dem til. Her er det bare at prøve sig frem, dog er anbefalingen herfra stadig at ligge ud med Visual Studio Code, da du så ikke er gået helt galt i byen.</p>\r\n<h3>Notepad++</h3>\r\n<p><a href=\"https://notepad-plus-plus.org/\">https://notepad-plus-plus.org/</a></p>\r\n<h3>Atom</h3>\r\n<p><a href=\"https://atom.io/\">https://atom.io/</a></p>\r\n<h3>Sublime Text</h3>\r\n<p><a href=\"https://www.sublimetext.com/\">https://www.sublimetext.com/</a></p>\r\n<h3>Brackets</h3>\r\n<p><a href=\"http://brackets.io/\">http://brackets.io/</a></p>', '2020-02-10 12:32:16'),
(2, 'Webudvikleren - Hvad er HTML? #02', '<p>HyperText Markup Language som HTML er forkortelsen af, bruges netop til at opmærke og definere hvad der er på din hjemmeside. Kort sagt vil det sige at du pakker dine forskellige elementer ind i nogle tags, så browseren ved hvad den har med at gøre. Lad os se nærmere på hvad det vil sige.</p>\r\n<h2>Hvordan skriver man HTML?</h2>\r\n<p>I din valgte kode editor (i eksemplet bruger jeg Visual Studio Code), kan vi nu oprette en \"index.html\"-fil. Dette er altid startsiden på et projekt der kun er bygget op i HTML. Så browseren vil automatisk starte op på denne side når man skriver sitets domæne (www.eksempel.dk). Hvad skal denne HTML-fil så bestå af, det ser vi lidt nærmere på herunder.</p>\r\n<p><img class=\"aligncenter size-full wp-image-21\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/html_1.png\" alt=\"\" width=\"694\" height=\"312\" /></p>\r\n<p>Som det fremgår af ovenstående figur, kan man på første linje se dette: <code>&lt;!DOCTYPE html&gt;</code>Dette fortæller browserne at vi har fat i et HTML5 dokument. Så ved browseren hvordan den skal håndtere denne fil. Allerede nu burde man kunne fornemme hvad et html-tag er. Der er på eksemplet, to forskellige tags. Det første (på linje 1) lukkes med det samme. Hvorimod på linje 2 og 12 vil man bemærke at der står html begge steder og på det sidste tag (lukke tagget) er der en skråstreg (forward slash) <code>&lt;/html&gt;</code>, der betyder at alt imellem hører under dette tag (linje 3-11). Altså er det html-kode der skal være imellem disse tags.</p>\r\n<p>Så er vi nået til HEAD-tagget, som starter på linje 3 og slutter på linje 8. Head-tagget bruges til information til browseren, det vil sige at disse oplysninger ikke fremgår på selve hjemmesiden. I eksemplet kan man se, at der bliver brugt masser af meta-tags. Det er så browseren kan forstå hvordan dokumentet skal behandles. Mere om dette senere. Title-tagget er vigtigt at få udfyldt korrekt. Det er blandt andet det der står i browserens faneblad, og som overskrift på Google når siden dukker op i søgeresultaterne.</p>\r\n<p><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/html_1.png\"><img class=\"aligncenter wp-image-21 size-full\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/html_1.png\" alt=\"\" width=\"694\" height=\"312\" /></a></p>\r\n<p>Det sidste og mest relevante tag er <code>&lt;body&gt;&lt;/body&gt;</code>, her imellem skal alt det synlige indhold være. Altså det der kommer frem på hjemmesiden. Lad os se nærmere på dette.</p>\r\n<h2>Semantiske tags</h2>\r\n<p>For at forstå hvad der skal i vores body-tag, skal der lidt viden ind om semantisk korrekthed, altså bruge de helt rigtige tags. Lad os starte med de tre store tags, som man kan kalde for en slags beholdere. <code>&lt;header&gt;&lt;/header&gt;</code>, <code>&lt;main&gt;&lt;/main&gt;</code> og <code>&lt;footer&gt;&lt;/footer&gt;</code>. De ses herunder først i HTML og result er så hvordan de ser ud på en hjemmeside.</p>\r\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"35322\" data-slug-hash=\"wQZpgP\" data-default-tab=\"html,result\" data-user=\"kanalhvordan\" data-pen-title=\"Semantiske tags - containers\">See the Pen <a href=\"https://codepen.io/kanalhvordan/pen/wQZpgP/\">Semantiske tags - containers</a> by Steffen Larsen (<a href=\"https://codepen.io/kanalhvordan\">@kanalhvordan</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\r\n<p><script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script></p>\r\n<p>I eksemplet er der sat et p-tag (disse bruges til et almindeligt tekst-afsnit) ind i hver beholder for at beskrive elementet. Det er dog svært med det blotte øje at kende forskel når man kigger på hjemmesiden. Men navngivningen er vigtig for browseren, så den ved nøjagtig hvilket element den har med at gøre.</p>\r\n<h3>H1-H6</h3>\r\n<p>De næste tags jeg vil introducere dig for er de såkaldte H-tags. Disse bliver brugt til overskrifter på din side, h1 er den vigtigste så h2, h3, h4, h5 og h6. Tommelfingerreglen er at du kun må have et h1-tag på hver side, derefter kan du give de forskellige afsnit en h2 overskrift. Har du underemner under disse afsnit er vi ude i en h3.<br />H4, h5 og h6 er derfor sjældent brugt i en artikel medmindre den er ekstremt uddybende. Se eksemplet herunder.</p>\r\n<p class=\"codepen\" data-height=\"300\" data-theme-id=\"35322\" data-slug-hash=\"eQojNR\" data-default-tab=\"html,result\" data-user=\"kanalhvordan\" data-pen-title=\"H1-H6 - Headlines\">See the Pen <a href=\"https://codepen.io/kanalhvordan/pen/eQojNR/\">H1-H6 - Headlines</a> by Steffen Larsen (<a href=\"https://codepen.io/kanalhvordan\">@kanalhvordan</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\r\n<p><script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script></p>\r\n<h3>De andre semantiske tags</h3>\r\n<p>Nav-elementets indhold er hjemmesidens navigation</p>\r\n<p>Article-elementet siger næsten sig selv, tommelfingerreglen her at den skal kunne give mening når den står for sig selv, altså en overskrift, en tekst og eventuelt et billede.</p>\r\n<p>Section-elementet er lidt sværere at definere, men kan f.eks. være en form for feature eller måske en fakta-boks i en artikel. Skal helst indholde en overskrift.</p>\r\n<p>Aside-elementet er i mange tilfælde som header og footer også en del af det statisk indhold, altså det ændrer sig sjældent uanset din mains indhold. altså kunne det være seneste artikler og lignende.</p>\r\n<p><img class=\"aligncenter wp-image-30\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/semantic_tags-724x1024.png\" alt=\"Semantiske tags\" width=\"392\" height=\"555\" /> Altså kan der også sagtens være sections i en article, og articles i en section. Så vidt muligt skal disse tags bruges hvis de beskriver hvad indholdet i dem er. Har du indhold som du ikke føler for skal være i disse tags, så skal vi over i de \"selv-opfundet\" tags. Altså div-tags.</p>\r\n<h2>DIV tags</h2>\r\n<p><code>&lt;div&gt;&lt;/div&gt;</code> dette bruger man når man ikke har andet, det er ihvertfald den mest simple forklaring. Disse tags er IKKE semantisk korrekte da de på ingen måder beskriver hvad indholdet er i dem. Altså har du ingen overskrift til dit stykke tekst kunne det være oplagt at smide det i et div-tag.</p>\r\n<p><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/div-container.png\"><img class=\"aligncenter wp-image-32 size-large\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/div-container-1024x119.png\" alt=\"div container med tekst\" width=\"843\" height=\"98\" /></a></p>\r\n<p>Du har nu lært en masse om de mest almindelige html-tags, det er nu på tide at få prøvet det af. Åben din kode editor og se om du kan få nedestående eksempel til at vise dig dit første HTML dokument, når du har skrevet det ind.</p>\r\n<p><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/kodeopgave_1.png\"><img class=\"aligncenter wp-image-34 size-large\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/kodeopgave_1-1024x623.png\" alt=\"Kodeopgave i html\" width=\"843\" height=\"513\" /></a></p>\r\n<p>Ovenstående kode, skulle gerne give dig nedenstående eksempel.</p>\r\n<p><img class=\"aligncenter size-full wp-image-35\" src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/resultat.png\" alt=\"Kode resultat\" width=\"783\" height=\"608\" /></p>', '2020-02-10 12:41:30'),
(3, 'Webudvikleren - Hvad er CSS #03', '<p>CSS, Cascading Style sheet, altså er der tale om noget styling af en art. Vi kiggede i den sidste lektion på html og nåede du til vejs ende med det hele, vil du også bemærke at dit HTML så ualmindeligt kedeligt ud. Sort på hvidt, og skrevet som et standard word-dokument. Dette kan CSS hjælpe dig med.</p>\r\n<h2>Introduktion til CSS</h2>\r\n<p>Hvis du ligesom jeg kører videre i det projekt vi allerede har startet, så vil vi nu have en index.html i vores mappe. For nemhedens skyld, skal vi nu oprette en \"<strong>style.css</strong>\" -fil i samme mappe. Visuelt kan du se nedenfor at jeg har oprettet filen i venstre side, og åbnet den i højre side (indtil videre er det et tomt dokument).</p>\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><img src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/style_css.png\" alt=\"\" class=\"wp-image-64\"/></figure></div>\r\n<h3>Forbind CSS og HTML</h3>\r\n<p>For at disse to dokumenter kan arbejde sammen skal vi forbinde dem, dette gør vi med en enkelt linje HTML-kode i vores HEAD-tag. Altså det som browseren læser, men som brugeren ikke kan se. Skriv nedestående kode i dit HTML-dokument og du skulle være klar til at style dine elementer.</p>\r\n<pre><code>&lt;link rel=\"stylesheet\" href=\"style.css\"&gt;</code><br></pre>\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/css_link.png\"><img src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/css_link.png\" alt=\"\" class=\"wp-image-72\"/></a><figcaption>Her ses på linje 7, hvordan det skal stå i HTML-dokumentet.</figcaption></figure></div>\r\n<p>Vi vil nu give de forskellige HTML-containers en baggrundsfarve, så vi rent faktisk kan se hvad der er hvad. Det gør vi med nedenstående kode. Bemærk at vi først vælger vores element <strong>main</strong>, og derefter propper vores ønsket css ind imellem de krøllede parenteser <strong>{background-color: #445566;}</strong>, vores enkelte regel i parentesen, skal altid afsluttes med semi-kolon.Leg selv med farverne, men bemærk hvor de forskellige grænser går allerede nu.</p>\r\n<p data-height=\"300\" data-theme-id=\"35322\" data-slug-hash=\"YdPPOJ\" data-default-tab=\"html,result\" data-user=\"kanalhvordan\" data-pen-title=\"CSS intro - baggrundsfarver\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/kanalhvordan/pen/YdPPOJ/\">CSS intro - baggrundsfarver</a> by Steffen Larsen (<a href=\"https://codepen.io/kanalhvordan\">@kanalhvordan</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\r\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\r\n<p>I ovenstående eksempel vil du i css-filen se dette:&nbsp;<code>/*Blå baggrund*/</code>&nbsp;Dette er en måde at skrive kommentar til din css på. Dette bliver ikke taget med af browseren, så det er for din egen skyld. Eller måske vejledning til andre der skal rette i din kode.</p>\r\n<p>Vi fik nu et godt overblik over hvordan HTML-elementerne ser ud. Altså i eksemplet, kan man se main-tagget øverst i den blå farve. Hvad man ikke kan se er at vores section faktisk ligger indeni main, fordi den lilla/pink farve dækker over resten af main-tagget. Det kan man derimod med vores artikler, her kan du se de to article-tags i grå, som faktisk ligger indeni vores section. Imellem disse articles dukker vores section-farve nemlig op igen (mere om dette senere).&nbsp;</p>\r\n<h3>Tekstens farve og størrelse - CSS klarer den!</h3>\r\n<p>Vi har nu ændret stylingen i vores overordnet HTML-tags. Nu kigger vi på styling af vores tekster. På nedestående eksempel kan du se at vi gør på nøjagtig samme måde som på de overordnet elementer. Først selectoren: <strong>p</strong> og derefter, vil vi gerne ændre farven, som sker således: <strong>{color: #fff;}</strong>.</p>\r\n<p data-height=\"300\" data-theme-id=\"35322\" data-slug-hash=\"oJgjMB\" data-default-tab=\"css,result\" data-user=\"kanalhvordan\" data-pen-title=\"CSS intro - Tekst farver/størrelser\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/kanalhvordan/pen/oJgjMB/\">CSS intro - Tekst farver/størrelser</a> by Steffen Larsen (<a href=\"https://codepen.io/kanalhvordan\">@kanalhvordan</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\r\n<script async=\"\" src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\r\n<p>Den vågne læser vil her se at vores h1 og h2 har fået samme css-regel blot ved at skrive dem sammen, og sætte et komma imellem. Kommaet er ekstremt vigtigt, ellers sker der en masse andet vi kommer ind på senere.</p>\r\n<p>Det var sådan set introduktionen til CSS, og vi skulle nu gerne have en smule forståelse for hvordan det nogenlunde hænger sammen. Hvis ikke, så fortvivl ej men fortsæt og så kommer det helt af sig selv.</p>\r\n<p>Nedestående kode er hvad du gerne skulle have i dit dokument med styling, for at have det samme resultat som jeg har her helt nederst.</p>\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter\"><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/css_result.png\"><img src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/css_result.png\" alt=\"styling af vore html med css\" class=\"wp-image-74\"/></a><figcaption>Vores css-fil indtil videre</figcaption></figure></div>\r\n<div class=\"wp-block-image\"><figure class=\"aligncenter is-resized\"><a href=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/result_css.png\"><img src=\"https://kanalhvordan.dk/wp-content/uploads/2018/12/result_css-1024x260.png\" alt=\"\" class=\"wp-image-75\" width=\"594\" height=\"151\"/></a><figcaption>Resultatet af HTML- og CSS-koden indtil videre.</figcaption></figure></div>', '2020-02-10 12:51:40'),
(4, 'test', 'hej hej', '2020-02-11 18:42:50');

--
-- Begrænsninger for dumpede tabeller
--

--
-- Indeks for tabel `articles`
--
ALTER TABLE `articles`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `id` (`id`);

--
-- Brug ikke AUTO_INCREMENT for slettede tabeller
--

--
-- Tilføj AUTO_INCREMENT i tabel `articles`
--
ALTER TABLE `articles`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=6;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
